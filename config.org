#+title: Literate configuration for emacs
#+startup: content

* Install/Reinstall packages
To make things more portable when you set up a new machine and want to
import your configuration you could set the variable
package-selected-package to the packages you use, and execute
~package-install-selected-packages~ to install the packages in the new
emacs or reinstall if you had a problem thinkering with your
configuration.

#+BEGIN_SRC emacs-lisp
  (setq package-selected-packages '(projectile rjsx-mode js2-mode
					       yasnippet-snippets
					       yasnippet web-mode
					       which-key lsp-mode
					       dracula-theme company
					       yaml-mode yaml-pro yaml))
					       #+END_SRC
* Look and feel
** UI customizations
*** UI
You can disable some UI parts of emacs to have a more clean look, you
can achieve that disabling the tool bar, scroll bar and the menu bar
with =tool-bar-mode=, =scroll-bar-mode= and =menu-bar-mode=
respectively.
#+begin_src emacs-lisp
(tool-bar-mode 0)
(scroll-bar-mode 0)
(menu-bar-mode 0)
#+end_src

*** Font
About the font, emacs can display various fonts in various part of the
emacs ui, so you can set a font for some buffers or set a font for the
modline, or for the entire frame (in emacs the 'window' of the program
is called frame, windows are the open files that you have when you
split the view of two or the same file, and a buffer is the thing
between the frame and the modeline). simply in this config I set a
font for all of emacs with =(set-face-attribute)= in emacs are
multiple ways to set a font so if you want to know more there's a wiki
page about it.  [[https://www.emacswiki.org/emacs/SetFonts]]

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Input Mono Narrow" :height 120)
#+end_src

*** Theme
Setting a color theme.  Set a color with with M-x =load-theme= and
press tab to see a list of available themes, with c-n and c-p you move
to the theme you want and with enter or return select the theme, also
if you like menus you can use M-x =customize-themes= and set a color
theme from there, but if you have a configuration file like this
sometimes the use of =customize= can break some things in your init
file so be aware.

For the color theme to be permanent use the function =load-theme= in
your configuration file just put the name of the theme, in the code
next the =t= is to tell emacs that you dont want user confirmation to
load the theme, this happens because third party themes sometimes are
not 'safe' for emacs so when you setted up a theme in your config file
at startup emacs always ask for confirmation to load the theme so the
=t= is for not askin confirmation to load the theme.

#+begin_src emacs-lisp
(load-theme 'dracula t)
#+end_src

remember if you have a theme enabled and you want to test other themes
with =load-theme= be aware that emacs can enable multiple themes at
the same time, so you must disable the theme that you are already
using to not create sort like a mixture of both themes. You can do
this with M-x =disable-theme= and selecting the theme you want to
disable.

** Behavior customizations
I like to have display numbers for everything so
=global-display-line-numbers-mode= is for that, also recently discover
in vim you can have relative line numbers, this mean that each line is
numbered relative to the cursor's current position and show the
/distance/ to that line so for example if you go to the top of the
file the cursor will be marked in the line 1 (this in emacs, in other
editor may vary) and the next line numbers will be the amount of
numbers to /get/ to that line so if the current cursor position is in
the line 1 to get to line 2 you just need to move one line down, to
get to the line 5 you'll need to move 4 line down, and so on. Also
this apply for lines above the cursor, following the previous example
if the cursos position is in the line 5 the lines above the cursor
will show 1, 2, 3 and 4 so for getting to the line 1 you need to move
4 lines up.

Also its useful to know the number of columns that the text has inside
the buffer so It'll be displayed the column number of the cursor in
the modeline, very useful in code 

#+begin_src emacs-lisp
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative) ;;relative line numbers
(column-number-mode 1)
#+end_src

I like the bar cursor '|', the default cursor emacs is the block 'â–ˆ'
(in unicode is U+2588) to change it you need to set the variable
=cursor-type= to the type of cursor avilable in emacs in my case is
bar, is you want to know other values acepted for =cursor-type= you
can do C-h v cursor-typpe inside emacs
#+begin_src emacs-lisp
(setq-default cursor-type 'bar)
#+end_src

Emacs has a mode called "show-paren-mode" that highlights matching
parentheses, brackets, and braces. This can be very helpful for
navigating through code.
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

Ido means Interactively Do things it's a package built in emacs that
gives you more things to do with your buffers, it's hard to explain, you
have to experience it.
#+begin_src emacs-lisp
(setq ido-enable-flex-matching t
      ido-everywhere t
      ido-create-new-buffer 'always
      ido-ignore-extensions t)
(setq-default confirm-nonexistent-file-or-buffe nil)
(ido-mode 1)
#+end_src

Electric pair mode is a mode to have automatic closing symbols /{},[],"",'',()/
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

* Melpa
Emacs only has the GNU Elpa repositories (free software) by default,
if you want more packages Melpa is good for that, since most of the
popular packages are there.

#+BEGIN_SRC emacs-lisp
;; use melpa
(require 'package) (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

* Project Management
I find project.el and projectile very similar but I prefer to use
the built in tool for my needs, mainly because projectile its a bit
overkill for my needs.

* Wich Key
Which key is a help for when you know the key combinations of certain
commands so when you type a key that is part of a conjuction of keys
for a command which key will show you a window in the bottom of the
screen showing you the key combinations to do a command. Very useful
if you are new to emacs.

#+BEGIN_SRC emacs-lisp
  ;;which key
  (require 'which-key)
  (which-key-mode)
  (which-key-setup-side-window-bottom)
#+END_SRC

* Company Mode
Provides a little popup for autocompletion like and IDE or vscode or
kate.
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-/") #'company-complete))
  (with-eval-after-load 'company-complete
    (define-key company-active-map
      (kbd "TAB")
      #'company-complete-common-or-cycle)
    (define-key company-active-map
      (kbd "<backtab>")
      (lambda ()
	(interactive)
	(company-complete-common-or-cycle -1))))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-.") #'company-show-location)
    (define-key company-active-map (kbd "RET") nil))
  #+END_SRC

* Org mode
** Start org mode with folded elements
Org mode has the ability of fold parts of theor document, when i load
this config I liked to have it folded so I can have easy acces to
every part of the config without using much C-n and C-p.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded nil) ;;change for now
#+END_SRC

** Better defaults for org-mode
Org-mode by default is a little bit anoying in some areas so the next
code its mean to "fix" them.
#+begin_src emacs-lisp
  (setq org-src-preserve-indentation t	;Preserva indentacion original
	org-edit-src-content-indentation 0 ;No agregar indentacion adicional
	org-src-tab-acts-natively t	 ; Usa la tecla tab para indentar codigo
	org-src-fontify-natively t	 ; Resalta sintaxis en bloques de codigo
	org-src-tab-indent t)		 ; Indenta codigo con tab
#+end_src

** Heading sizes and more
All the headings have the same size also the text is not aligned with his
heading by default so to change the heading sizes and align the text with
the coresponding header.

*** Custom heading sizes
#+begin_src emacs-lisp
;; Configurar estilos para los niveles de encabezados
(dolist (level '((1 . 1.4) (2 . 1.2) (3 . 1.1) (4 . 1.0) (5 . 0.9)))
  (set-face-attribute (intern (format "org-level-%d" (car level))) nil
		      :inherit (intern (format "outline-%d" (car level)))
		      :height (cdr level)))

;; Config de estilo para el titulo del documento org
(set-face-attribute 'org-document-title nil :height 2.0)

;; Ajustar el texto a su encabezado
;; (defun my/write-prose ()
;;   (variable-pitch-mode 0)
;;   (set-face-attribute 'org-indent nil :inherit '(org-hide variable-pitch))
;;   (set-face-attribute 'org-hide nil :inherit 'fixed-pitch))

;; (add-hook 'org-mode-hook #'my/write-prose)
#+end_src

*** Custom face for code blocks
Also you can configure how code blocks look like with custom-set-faces or
set-face-attribute
#+begin_src emacs-lisp
(set-face-attribute 'org-block nil
                    :extend t
		    :foreground "foreground" ;:foreground "#ffb86c"
                    :slant 'italic)

(set-face-attribute 'org-block-begin-line nil
                    :extend t
                    :overline "foreground"
                    :underline '(:color foreground-color :style line :position t)
                    :slant 'italic
                    :weight 'bold)

(set-face-attribute 'org-block-end-line nil
                    :inherit 'org-block-begin-line
                    :extend t
                    :overline nil
                    :underline '(:color foreground-color :style line :position t))

;;Using custom-set-faces
;; (custom-set-faces
;;  '(org-block ((t (:extend t :foreground "#ffb86c" :slant italic))))
;;  '(org-block-begin-line ((t (:inherit org-meta-line :extend t :overline "foreground" :underline (:color foreground-color :style line :position t) :slant italic :weight bold))))
;;  '(org-block-end-line ((t (:inherit org-block-begin-line :extend t :overline nil :underline (:color foreground-color :style line :position t))))))

#+end_src

*** Mixed fonts
#+begin_src emacs-lisp
(set-face-attribute 'variable-pitch nil :family "Noto Sans" :height 1.0)
(set-face-attribute 'fixed-pitch nil :family "FiraCode Nerd Font" :height 0.9)

(custom-set-faces
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-table ((t (:inherit fixed-pitch))))
 '(org-list-dt ((t (:inherit fixed-pitch))))
 '(org-list-dd ((t (:inherit fixed-pitch))))
 '(org-tag ((t (:inherit fixed-pitch))))
 '(org-quote ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit fixed-pitch))))
 '(org-link ((t (:inherit fixed-pitch))))
 '(org-toc ((t (:inherit fixed-pitch))))
 '(org-formula ((t (:inherit fixed-pitch))))
 '(org-verbatim ((t (:inherit fixed-pitch))))
 '(org-strike ((t (:inherit fixed-pitch))))
 '(org-checkbox ((t (:inherit fixed-pitch))))
 '(org-list ((t (:inherit fixed-pitch))))
 '(org-meta-line ((t (:inherit fixed-pitch)))))

(add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

* Tree-Sitter
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(setq major-mode-remap-alist
      '((c-mode . c-ts-mode)
	(c++-mode . c++-ts-mode)
	(yaml-mode . yaml-ts-mode)
	(conf-toml-mode . toml-ts-mode)))
#+end_src

